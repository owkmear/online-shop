/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});


Ext.application({
    models: [
        'User',
        'Customer',
        'ManagerItem',
        'ManagerOrder',
        'Position',
        'GuestItem',
        'CustomerItem',
        'GuestItemsSortByCategory',
        'CustomerOrder'
    ],
    stores: [
        'Customers',
        'ManagerItems',
        'CustomerItems',
        'ManagerOrders',
        'Positions',
        'GuestItems',
        'SortByCategory',
        'GuestItemsSortByPageSize',
        'CustomerItemsSortByPageSize',
        'SortByCategory1',
        'CustomerOrders'
    ],
    views: [
        'MainViewport',
        'LoginForm',
        'RegisterForm',
        'CustomersTableAddForm',
        'EditAccountForm',
        'AddAccountForm',
        'AddItemForm',
        'EditItemForm',
        'ConfirmOrderForm',
        'CloseOrderForm',
        'CreateOrderForm',
        'CancelOrderForm'
    ],
    controllers: [
        'Accounts',
        'MyController',
        'Security',
        'Sections',
        'Customers',
        'Items',
        'Utilities',
        'ManagerOrders',
        'CustomerItems',
        'Basket',
        'AdditionalInformation',
        'CustomerOrders'
    ],
    name: 'MyApp',

    launch: function() {
        Ext.create('MyApp.view.MainViewport');

        // Неймспейс для хранения глобальных переменных
        Ext.ns('MyApp.application.Globals');
        //console.log("namespace MyApp.application.Globals is added");

        // Получение csrf-токена из формы
        var csrfToken = $("input[name='__RequestVerificationToken']").val();
        MyApp.application.Globals.csrfToken = csrfToken;
        //console.log("csrfToken: " + MyApp.application.Globals.csrfToken);

        // Добавление токена формы для защиты от CSRF
        //Ext.getStore('ProductsTable2').getProxy().extraParams.__RequestVerificationToken = MyApp.application.Globals.csrfToken;
        //Ext.getStore('Customer').getProxy().extraParams.__RequestVerificationToken = MyApp.application.Globals.csrfToken;

        Ext.getStore('Customers').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
        Ext.getStore('ManagerItems').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
        Ext.getStore('CustomerItems').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
        Ext.getStore('ManagerOrders').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
        Ext.getStore('Positions').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
        Ext.getStore('GuestItems').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
        Ext.getStore('CustomerOrders').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };

        Ext.getStore('SortByCategory').getProxy().headers = { '__RequestVerificationToken': MyApp.application.Globals.csrfToken };
    }

});
